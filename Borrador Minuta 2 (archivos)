#include <iostream>
#include <string>
#include <vector> // Incluir la biblioteca vector
#include <mysql.h>
#include <iomanip> // Incluir la biblioteca iomanip para setw
using namespace std;

class MySQLConnector {
private:
    MYSQL* connection;
    MYSQL_RES* res;
    MYSQL_STMT* stmt;

public:
    MySQLConnector(const char* host, const char* user, const char* password, const char* database, int port) {
        connection = mysql_init(0);
        connection = mysql_real_connect(connection, host, user, password, database, port, NULL, 0);
        if (connection) {
            cout << "Conexion Exitosa..." << endl;
        }
        else {
            cout << "Error en la Conexion...";
        }
    }

    void insert(const string& query) {
        executeQuery(query);
    }

    void update(const string& query) {
        executeQuery(query);
    }

    void del(const string& query) {
        executeQuery(query);
    }

    bool select(const string& query) {
        if (mysql_query(connection, query.c_str()) == 0) {
            res = mysql_store_result(connection);
            if (res) {
                int num_fields = mysql_num_fields(res);
                MYSQL_FIELD* fields = mysql_fetch_fields(res);
                vector<size_t> max_lengths(num_fields, 0); // Longitud máxima de cada campo

                // Calcular la longitud máxima de cada campo
                MYSQL_ROW row;
                while ((row = mysql_fetch_row(res)) != NULL) {
                    for (int i = 0; i < num_fields; i++) {
                        if (row[i] && strlen(row[i]) > max_lengths[i]) {
                            max_lengths[i] = strlen(row[i]);
                        }
                    }
                }

                // Imprimir los datos con alineación
                mysql_data_seek(res, 0); // Reiniciar el cursor
                while ((row = mysql_fetch_row(res)) != NULL) {
                    for (int i = 0; i < num_fields; i++) {
                        cout << left << setw(max_lengths[i] + 2) << row[i];
                    }
                    cout << endl;
                }

                return true; // Se encontraron resultados
            }
        }
        else {
            cout << "Error al ejecutar el query: " << mysql_error(connection) << endl;
        }

        return false; // No se encontraron resultados o hubo un error
    }


    ~MySQLConnector() {
        mysql_free_result(res);
        mysql_close(connection);
    }

private:
    void executeQuery(const string& query) {
        if (mysql_query(connection, query.c_str()) == 0) {
            cout << "Query ejecutado correctamente." << endl;
        }
        else {
            cout << "Error al ejecutar el query: " << mysql_error(connection) << endl;
        }
    }
};

// Prototipos de las funciones
void updateClientes(MySQLConnector& connector, const string& tabla);
void updatePlatos(MySQLConnector& connector, const string& tabla);
void updateOrdenes(MySQLConnector& connector, const string& tabla);
void updateDetallesOrden(MySQLConnector& connector, const string& tabla);

int main() {
    MySQLConnector connector("localhost", "root", "/BBCN1978*1973", "myrestaurant", 3306);

    int opcion;
    string query; // Solo declara la variable aquí, sin inicializarla

    do {
        cout << "\nMenu:\n1. Insertar registro\n2. Actualizar registro\n3. Eliminar registro\n4. Mostrar registros\n5. Salir\nOpcion: ";
        cin >> opcion;

        string tabla;
        switch (opcion) {
        case 1://archivo 
        {
            cout << "Seleccione la tabla en la que desea insertar datos:\n1. Clientes\n2. Platos\n3. Ordenes\n4. Detalles_Orden\nTabla: ";
            int opcionTabla;
            cin >> opcionTabla;

            switch (opcionTabla) {
            case 1:
                tabla = "Clientes";
                break;
            case 2:
                tabla = "Platos";
                break;
            case 3:
                tabla = "Ordenes";
                break;
            case 4:
                tabla = "Detalles_Orden";
                break;
            default:
                cout << "Opcion de tabla invalida." << endl;
                continue;
            }

            cout << "Ingrese los datos para la tabla " << tabla << ":" << endl;

            if (tabla == "Clientes") {
                string nombre, telefono, email;
                cout << "Nombre: ";
                cin.ignore();
                getline(cin, nombre);
                cout << "Telefono: ";
                getline(cin, telefono);
                cout << "Email: ";
                getline(cin, email);

                query = "INSERT INTO " + tabla + " (nombre, telefono, email) VALUES ('" + nombre + "', '" + telefono + "', '" + email + "')";
                connector.insert(query);
            }
            else if (tabla == "Platos") {
                string nombre, descripcion;
                double precio;
                cout << "Nombre del plato: ";
                cin.ignore();
                getline(cin, nombre);
                cout << "Descripcion: ";
                getline(cin, descripcion);
                cout << "Precio: ";
                cin >> precio;

                query = "INSERT INTO " + tabla + " (nombre, descripcion, precio) VALUES ('" + nombre + "', '" + descripcion + "', " + to_string(precio) + ")";
                connector.insert(query);
            }
            else if (tabla == "Ordenes") {
                int cliente_id;
                double total;
                cout << "ID del cliente: ";
                cin >> cliente_id;
                cout << "Total: ";
                cin >> total;

                query = "INSERT INTO " + tabla + " (cliente_id, total) VALUES (" + to_string(cliente_id) + ", " + to_string(total) + ")";
                connector.insert(query);
            }
            else if (tabla == "Detalles_Orden") {
                int orden_id, plato_id, cantidad;
                double subtotal;
                cout << "ID de la orden: ";
                cin >> orden_id;
                cout << "ID del plato: ";
                cin >> plato_id;
                cout << "Cantidad: ";
                cin >> cantidad;
                cout << "Subtotal: ";
                cin >> subtotal;

                query = "INSERT INTO " + tabla + " (orden_id, plato_id, cantidad, subtotal) VALUES (" + to_string(orden_id) + ", " + to_string(plato_id) + ", " + to_string(cantidad) + ", " + to_string(subtotal) + ")";
                connector.insert(query);
            }

            break;
        }
        case 2:
        {
            cout << "Seleccione la tabla que desea modificar:\n1. Clientes\n2. Platos\n3. Ordenes\n4. Detalles_Orden\nTabla: ";
            int opcionTabla;
            cin >> opcionTabla;

            switch (opcionTabla) {
            case 1:
                tabla = "Clientes";
                updateClientes(connector, tabla);
                break;
            case 2:
                tabla = "Platos";
                updatePlatos(connector, tabla);
                break;
            case 3:
                tabla = "Ordenes";
                updateOrdenes(connector, tabla);
                break;
            case 4:
                tabla = "Detalles_Orden";
                updateDetallesOrden(connector, tabla);
                break;
            default:
                cout << "Opcion de tabla invalida." << endl;
                continue;
            }
            break;
        }
        case 3:
        {
            cout << "Seleccione la tabla de la que desea eliminar un registro:\n1. Clientes\n2. Platos\n3. Ordenes\n4. Detalles_Orden\nTabla: ";
            int opcionTabla;
            cin >> opcionTabla;

            string tabla;
            switch (opcionTabla) {
            case 1:
                tabla = "Clientes";
                break;
            case 2:
                tabla = "Platos";
                break;
            case 3:
                tabla = "Ordenes";
                break;
            case 4:
                tabla = "Detalles_Orden";
                break;
            default:
                cout << "Opcion de tabla invalida." << endl;
                continue;
            }

            int id;
            cout << "Ingrese el ID del registro que desea eliminar de la tabla " << tabla << ": ";
            cin >> id;

            // Verificar si el ID pertenece a la tabla seleccionada
            string query = "SELECT id FROM " + tabla + " WHERE id = " + to_string(id);
            if (connector.select(query)) {
                // El ID pertenece a la tabla, proceder con la eliminación
                query = "DELETE FROM " + tabla + " WHERE id = " + to_string(id);
                connector.del(query);
            }
            else {
                cout << "El ID especificado no pertenece a la tabla seleccionada." << endl;
            }

            break;
        }

        case 4:
        {
            cout << "Seleccione la tabla que desea visualizar:\n1. Clientes\n2. Platos\n3. Ordenes\n4. Detalles_Orden\nTabla: ";
            int opcionTabla;
            cin >> opcionTabla;

            switch (opcionTabla) {
            case 1:
                tabla = "Clientes";
                break;
            case 2:
                tabla = "Platos";
                break;
            case 3:
                tabla = "Ordenes";
                break;
            case 4:
                tabla = "Detalles_Orden";
                break;
            default:
                cout << "Opcion de tabla invalida." << endl;
                continue;
            }

            cout << "Mostrando todos los registros de la tabla " << tabla << ":" << endl;
            query = "SELECT * FROM " + tabla;
            connector.select(query);
            break;
        }
        case 5:
            cout << "Saliendo..." << endl;
            break;
        default:
            cout << "Opcion no valida. Por favor, intente de nuevo." << endl;
        }
    } while (opcion != 5);

    cout << "Presione Enter para salir...";
    cin.ignore();
    cin.get(); // Esperar a que el usuario presione Enter

    return 0;
}


void updateClientes(MySQLConnector& connector, const string& tabla) {
    string campo;
    string valor;
    int id;
    cout << "Ingrese el ID del cliente que desea modificar: ";
    cin >> id;
    cout << "Seleccione el campo que desea modificar:\n1. Nombre\n2. Telefono\n3. Email\nOpcion: ";
    int opcionCampo;
    cin >> opcionCampo;
    switch (opcionCampo) {
    case 1:
        campo = "nombre";
        break;
    case 2:
        campo = "telefono";
        break;
    case 3:
        campo = "email";
        break;
    default:
        cout << "Opcion de campo invalida." << endl;
        return;
    }
    cout << "Ingrese el nuevo valor para el campo " << campo << ": ";
    cin.ignore();
    getline(cin, valor);
    string query = "UPDATE " + tabla + " SET " + campo + " = '" + valor + "' WHERE id = " + to_string(id);
    connector.update(query);
}

void updatePlatos(MySQLConnector& connector, const string& tabla) {
    string campo;
    string valor;
    int id;
    cout << "Ingrese el ID del plato que desea modificar: ";
    cin >> id;
    cout << "Seleccione el campo que desea modificar:\n1. Nombre del plato\n2. Descripcion\n3. Precio\nOpcion: ";
    int opcionCampo;
    cin >> opcionCampo;
    switch (opcionCampo) {
    case 1:
        campo = "nombre";
        break;
    case 2:
        campo = "descripcion";
        break;
    case 3:
        campo = "precio";
        break;
    default:
        cout << "Opcion de campo invalida." << endl;
        return;
    }
    cout << "Ingrese el nuevo valor para el campo " << campo << ": ";
    cin.ignore();
    getline(cin, valor);
    string query = "UPDATE " + tabla + " SET " + campo + " = '" + valor + "' WHERE id = " + to_string(id);
    connector.update(query);
}

void updateOrdenes(MySQLConnector& connector, const string& tabla) {
    string campo;
    string valor;
    int id;
    cout << "Ingrese el ID de la orden que desea modificar: ";
    cin >> id;
    cout << "Seleccione el campo que desea modificar:\n1. Cliente_id\n2. Fecha_hora\n3. Total\nOpcion: ";
    int opcionCampo;
    cin >> opcionCampo;
    switch (opcionCampo) {
    case 1:
        campo = "cliente_id";
        break;
    case 2:
        campo = "fecha_hora";
        break;
    case 3:
        campo = "total";
        break;
    default:
        cout << "Opcion de campo invalida." << endl;
        return;
    }
    cout << "Ingrese el nuevo valor para el campo " << campo << ": ";
    cin.ignore();
    getline(cin, valor);
    string query = "UPDATE " + tabla + " SET " + campo + " = '" + valor + "' WHERE id = " + to_string(id);
    connector.update(query);
}

void updateDetallesOrden(MySQLConnector& connector, const string& tabla) {
    string campo;
    string valor;
    int id;
    cout << "Ingrese el ID del detalle de orden que desea modificar: ";
    cin >> id;
    cout << "Seleccione el campo que desea modificar:\n1. Orden_id\n2. Plato_id\n3. Cantidad\n4. Subtotal\nOpcion: ";
    int opcionCampo;
    cin >> opcionCampo;
    switch (opcionCampo) {
    case 1:
        campo = "orden_id";
        break;
    case 2:
        campo = "plato_id";
        break;
    case 3:
        campo = "cantidad";
        break;
    case 4:
        campo = "subtotal";
        break;
    default:
        cout << "Opcion de campo invalida." << endl;
        return;
    }
    cout << "Ingrese el nuevo valor para el campo " << campo << ": ";
    cin.ignore();
    getline(cin, valor);
    string query = "UPDATE " + tabla + " SET " + campo + " = '" + valor + "' WHERE id = " + to_string(id);
    connector.update(query);
}
